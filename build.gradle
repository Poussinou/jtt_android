// vim: et ts=4 sts=4 sw=4 syntax=groovy
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.13.2'
        classpath "org.robolectric:robolectric-gradle-plugin:0.13.2"
        classpath "com.neenbedankt.gradle.plugins:android-apt:1.4"
    }
}

apply plugin: 'android'
apply plugin: 'jacoco'
apply plugin: 'robolectric'
apply plugin: 'com.neenbedankt.android-apt'

repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    compile 'com.luckycatlabs:SunriseSunsetCalculator:1.1'
    compile 'com.android.support:support-v4:21.0.0'
    compile 'com.google.dagger:dagger:2.0-SNAPSHOT'

    androidTestCompile 'junit:junit:4.11'
    androidTestCompile 'org.hamcrest:hamcrest-integration:1.3'
    androidTestCompile 'org.hamcrest:hamcrest-core:1.3'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
    androidTestCompile ('org.robolectric:robolectric:2.4') {
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
    }
    androidTestCompile 'com.google.android:android:4.1.1.4'
    androidTestCompile 'com.luckycatlabs:SunriseSunsetCalculator:1.1'
    androidTestCompile 'com.google.dagger:dagger:2.0-SNAPSHOT'

    apt 'com.google.dagger:dagger-compiler:2.0-SNAPSHOT'
    provided 'org.glassfish:javax.annotation:10.0-b28'
}

android {
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            res.srcDirs = ['res']
        }
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')

        instrumentationTest.setRoot('JttAndroidTest')
        instrumentationTest {
           java.srcDirs = ['JttAndroidTest/src']
           res.srcDirs = ['JttAndroidTest/res']
        }

        androidTest {
            setRoot('src/test')
        }
    }
    compileSdkVersion 'android-21'
    buildToolsVersion '20'

    defaultConfig {
        testApplicationId "com.aragaer.jtt.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }

    signingConfigs {
        release {
            storeFile file(".")
            storePassword ''
            keyAlias ''
            keyPassword ''
        }
    }

    buildTypes {
        debug {
        }
        release {
            runProguard true
            proguardFile 'proguard.cfg'
            signingConfig signingConfigs.release
            zipAlign true
        }
    }
}

robolectric {
    include '**/*Test.class'
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':assembleRelease')) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())

        def store_file = file(properties.getProperty('key.file'))
        def store_pass = System.console().readPassword("\nPlease enter store passphrase: ")
        def key_alias = properties.getProperty('key.alias')
        def key_pass = System.console().readPassword("\nPlease enter key passphrase: ")

        android.signingConfigs.release.storeFile = store_file
        android.signingConfigs.release.storePassword = new String(store_pass)
        android.signingConfigs.release.keyAlias = new String(key_alias)
        android.signingConfigs.release.keyPassword = new String(key_pass)
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = false
        html.enabled = true
    }

    // Class R is used, but usage will not be covered, so ignore this class from report
    classDirectories = fileTree(
        dir: './build/intermediates/classes/debug',
        excludes: ['**/R.class',
                   '**/R$*.class'
    ])
    sourceDirectories = files('src')
    executionData = files('build/jacoco/unitTest.exec')
}

tasks.withType(Test) {
    testLogging.exceptionFormat = 'full'
}
