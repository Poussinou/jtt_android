// vim: et ts=4 sts=4 sw=4
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.13.+'
    }
}

apply plugin: 'android'

repositories {
    mavenCentral()
}

configurations {
    unitTestCompile.extendsFrom runtime
    unitTestRuntime.extendsFrom unitTestCompile
}

dependencies {
    compile 'com.luckycatlabs:SunriseSunsetCalculator:1.1'
    compile 'com.android.support:support-v4:18.0.+'

    unitTestCompile files("$project.buildDir/classes/debug")
    unitTestCompile 'junit:junit:4.8.2'
}

sourceSets {
    unitTest {
        java.srcDirs = ['test']
    }
}

android {
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
        }
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    compileSdkVersion 'android-20'
    buildToolsVersion '20'

    signingConfigs {
        release {
            storeFile file(System.getenv("KEYSTORE"))
            storePassword ''
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword ''
        }
    }
    buildTypes {
        debug {
        }
        release {
            runProguard true
            proguardFile 'proguard.cfg'
            signingConfig signingConfigs.release
            zipAlign true
        }
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':assembleRelease')) {
        def store_pass = System.console().readPassword("\nPlease enter store passphrase: ")
        android.signingConfigs.release.storePassword = new String(store_pass)
        def key_pass = System.console().readPassword("\nPlease enter key passphrase: ")
        android.signingConfigs.release.keyPassword = new String(key_pass)
    }
}

task unitTest(type: Test, dependsOn: assembleDebug) {
    description = "run unit tests"
    testClassesDir = project.sourceSets.unitTest.output.classesDir
    classpath = project.sourceSets.unitTest.runtimeClasspath
}

check.dependsOn unitTest
